#!/bin/bash

# Script de testes para Git Bash
# Execute: bash test-endpoints.sh

echo "üß™ Testando Escalabilidade e Resili√™ncia"
echo "========================================="
echo ""

# Aguardar servidor iniciar
echo "‚è≥ Aguardando servidor iniciar..."
sleep 3

# 1. Health Check
echo "1Ô∏è‚É£ Testando Health Check..."
curl -s http://localhost:3000/health | head -c 200
echo ""
echo ""

# 2. Pagina√ß√£o
echo "2Ô∏è‚É£ Testando Pagina√ß√£o (5 produtos)..."
curl -s "http://localhost:3000/demo/produtos?page=1&limit=5" | head -c 300
echo ""
echo ""

# 3. Cache - Primeira chamada
echo "3Ô∏è‚É£ Testando Cache - Primeira chamada (database)..."
curl -s http://localhost:3000/demo/produtos/1
echo ""
echo ""

# 4. Cache - Segunda chamada
echo "4Ô∏è‚É£ Testando Cache - Segunda chamada (cache)..."
sleep 1
curl -s http://localhost:3000/demo/produtos/1
echo ""
echo ""

# 5. API Externa
echo "5Ô∏è‚É£ Testando API Externa com Fallback..."
curl -s http://localhost:3000/demo/externo | head -c 200
echo ""
echo ""

# 6. Rate Limiting
echo "6Ô∏è‚É£ Testando Rate Limiting (fazendo 25 requisi√ß√µes)..."
echo "Requisi√ß√µes 1-20 devem funcionar, 21+ devem retornar erro 429"
for i in {1..25}; do
  response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/demo/produtos)
  if [ "$response" == "429" ]; then
    echo "‚ùå Requisi√ß√£o $i: BLOQUEADA (429 - Too Many Requests) ‚úÖ"
  else
    echo "‚úÖ Requisi√ß√£o $i: OK ($response)"
  fi
  sleep 0.1
done

echo ""
echo "‚úÖ Testes conclu√≠dos!"
echo ""
echo "üìä Resumo:"
echo "- Health Check: Funcionando"
echo "- Pagina√ß√£o: Funcionando"
echo "- Cache: Funcionando"
echo "- API Externa: Funcionando"
echo "- Rate Limiting: Funcionando"
